// This is your Prisma schema file for testing,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/test-client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./test.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  theme     String   @default("SYSTEM")
  language  String   @default("JA")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  feeds              Feed[]
  passwordResetTokens PasswordResetToken[]
  articleReadStatus  ArticleReadStatus[]
  articleBookmarks   ArticleBookmark[]

  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  used      Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Feed {
  id            String    @id @default(cuid())
  title         String
  url           String
  siteUrl       String?   @map("site_url")
  description   String?
  favicon       String?
  userId        String    @map("user_id")
  lastFetchedAt DateTime? @map("last_fetched_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  articles Article[]

  @@unique([userId, url])
  @@map("feeds")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  url         String   @unique
  description String?
  publishedAt DateTime @map("published_at")
  feedId      String   @map("feed_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  readStatus ArticleReadStatus[]
  bookmarks  ArticleBookmark[]

  @@map("articles")
}

model ArticleReadStatus {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  articleId String   @map("article_id")
  isRead    Boolean  @default(false) @map("is_read")
  readAt    DateTime? @map("read_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@map("article_read_status")
}

model ArticleBookmark {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  articleId String   @map("article_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@map("article_bookmarks")
}

model CronLog {
  id           String   @id @default(cuid())
  jobName      String   @map("job_name")
  status       String   // 'success', 'partial', 'failed'
  totalFeeds   Int      @map("total_feeds")
  successCount Int      @map("success_count")
  errorCount   Int      @map("error_count")
  errors       String?  // JSON string of error details
  executedAt   DateTime @map("executed_at")
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([jobName, executedAt])
  @@map("cron_logs")
}

